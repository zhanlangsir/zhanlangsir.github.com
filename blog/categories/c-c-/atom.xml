<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c/c++ | 挨踢人生]]></title>
  <link href="http://zhanlangsir.github.com/blog/categories/c-c-/atom.xml" rel="self"/>
  <link href="http://zhanlangsir.github.com/"/>
  <updated>2012-12-28T00:52:17+08:00</updated>
  <id>http://zhanlangsir.github.com/</id>
  <author>
    <name><![CDATA[zhanlang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[cmake "install Library TARGETS given no DESTINATION" 错误]]></title>
    <link href="http://zhanlangsir.github.com/blog/2012/09/20/cmake-install-library-targets-given-no-destination-error/"/>
    <updated>2012-09-20T00:00:00+08:00</updated>
    <id>http://zhanlangsir.github.com/blog/2012/09/20/cmake-install-library-targets-given-no-destination-error</id>
    <content type="html"><![CDATA[<p>在linux下没问题的cmake文件到了win下却出现<strong>"install Library TARGETS given no DESTINATION"</strong>错误，这不科学啊。又翻了一遍发现win下包括cygwin都属于dll平台，</p>

<p>动态库文件应该属于<strong>RUNTIME</strong>目标,所以把install中的Library改为RUNTIME就OK了。</p>

<pre><code>add_library(libname
SHARED
files
)
install(TARGETS libname RUNTIME DESTINATION ${libdir})
</code></pre>

<p>参考：<a href="http://www.cmake.org/cmake/help/v2.8.8/cmake.html#prop_tgt:LIBRARY_OUTPUT_DIRECTORY" title="cmake: LIBRARY_OUTPUT_DIRECTORY">cmake: LIBRARY_OUTPUT_DIRECTORY</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['uicc.exe' 不是内部或外部命令，也不是可运行的程序]]></title>
    <link href="http://zhanlangsir.github.com/blog/2011/11/12/uicc-exe-not-internal-error-when-complier-wtl/"/>
    <updated>2011-11-12T00:00:00+08:00</updated>
    <id>http://zhanlangsir.github.com/blog/2011/11/12/uicc-exe-not-internal-error-when-complier-wtl</id>
    <content type="html"><![CDATA[<p>使用wtl编译时出现一些警告：<br/>
warning MSB8004: Intermediate 目录未以斜杠结尾。此生成实例将添加斜杠，因为必须有这个斜杠才能正确计算 Intermediate 目录。<br/>
warning MSB8004: Output 目录未以斜杠结尾。此生成实例将添加斜杠，因为必须有这个斜杠才能正确计算 Output 目录。</p>

<p>其实这个警告没什么关系，要去掉只须在项目属性的常规设置中为两个目录添加一个斜杠结尾就OK了。</p>

<p>添加Ribbon特性的时候出现以下错误：<br/>
'uicc.exe' 不是内部或外部命令，也不是可运行的程序</p>

<p>原因是没有这个工具，可以到以下地址下载最新的window sdk,安装之后就可以了<br/>
<a href="http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;id=18950" title="windows sdk download path">window sdk下载地址</a></p>

<!--more-->


<p>上面的链接有三个版本的sdk</p>

<ul>
<li>GRMSDK_EN_DVD.iso</li>
<li>GRMSDKIAI_EN_DVD.iso</li>
<li>GRMSDKX_EN_DVD.iso<br/>
其中第一个是x86体系的，第二个是amd64体系，最后一个则是Itanium体系的，自己选择下那个。</li>
</ul>


<p>安装完毕就可以在C:Program FilesMicrosoft SDKsWindowsv7.1Bin 这个目录下看到有uicc这个工具了。</p>

<p>但是到这里还是不能成功编译的，因为这个目录还没有添加到Path环境变量中，所以还是无法找到uicc工具，所以还要把uicc工具所在目录添加到Path环境变量中。具体步骤如下：<br/>
右键我的电脑(或者计算机)->属性->高级系统设置->环境变量，在系统变量中找到Path,拖到最后，在最后一项后加个<strong><em>;</em></strong>号，然后把uicc所在目录添加到后面。</p>

<p>重启一下vs，重新编译</p>

<p><strong>PS:</strong><br/>
如果安装sdk时出现错误，可以看一下这里的解决办法，希望能帮到各位：<a href="/blog/2011/11/12/error-of-install-windows-sdk" title="error when install windows sdk">windows sdk安装错误</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google C++ 代码风格规范]]></title>
    <link href="http://zhanlangsir.github.com/blog/2011/04/10/google-cpp-code-style/"/>
    <updated>2011-04-10T00:00:00+08:00</updated>
    <id>http://zhanlangsir.github.com/blog/2011/04/10/google-cpp-code-style</id>
    <content type="html"><![CDATA[<p>好的代码风格规范是衡量一个优秀的程序员必要条件，如果代码有比较好的风格规范，那么阅读者能够一目了然，反之，则需要花费大量的时间去读懂代码。<br/>
所以，相当程序员的童鞋就有必要养成良好的代码风格习惯，这样才能在以后的团队项目开发中发挥更大的作用。<br/>
下面是Google使用的C++代码规范，童鞋们可以参考一下，但是也不必全部照做，因为代码风格并没有一个统一的标准。例如微软也有自己的一套标准，所以应该是饱着“取其精华,弃其糟粕”的心态去学习~</p>

<p><a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml">googloe c++ code style</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[c++XML库]]></title>
    <link href="http://zhanlangsir.github.com/blog/2011/04/10/cpp-xml-library/"/>
    <updated>2011-04-10T00:00:00+08:00</updated>
    <id>http://zhanlangsir.github.com/blog/2011/04/10/cpp-xml-library</id>
    <content type="html"><![CDATA[<p>在C++中，库的地位是非常高的，各种各样的库极大的扩展了C++的功能，一个设计的好的库，让你对C++的使用更加得心应手，现在我们介绍的就是xml操作的库~请看接下来的介绍！</p>

<p>C++各大有名库的介绍——XML</p>

<ol>
<li><p><a href="http://xml.apache.org/xerces-c/">Xerces</a><br/>
Xerces-C++ 是一个非常健壮的XML解析器，它提供了验证，以及SAX和DOM API。XML验证在文档类型定义(Document Type Definition，DTD)方面有很好的支持，并且在2001年12月增加了支持W3C XMLSchema 的基本完整的开放标准。
<!--more--></p></li>
<li><p><a href="http://www.xmlbooster.com/">XMLBooster</a><br/>
这个库通过产生特制的parser的办法极大的提高了XML解析的速度，并且能够产生相应的GUI程序来修改这个parser。在DOM和SAX两大主流XML解析办法之外提供了另外一个可行的解决方案。</p></li>
<li><p><a href="http://www.extreme.indiana.edu/xgws/xsoap/xpp">Pull Parser</a><br/>
这个库采用pull方法的parser。在每个SAX的parser底层都有一个pull的parser，这个xpp把这层暴露出来直接给大家使用。在要充分考虑速度的时候值得尝试。</p></li>
<li><p><a href="http://xml.apache.org/xalan-c/">Xalan</a><br/>
Xalan是一个用于把XML文档转换为HTML，纯文本或者其他XML类型文档的XSLT处理器。</p></li>
<li><p><a href="http://www.firstobject.com/xml.htm">CMarkup</a><br/>
这是一种使用EDOM的XML解析器。在很多思路上面非常灵活实用。值得大家在DOM和SAX之外寻求一点灵感。</p></li>
<li><p><a href="http://libxmlplusplus.sourceforge.net/">libxml++</a><br/>
libxml++是对著名的libxml XML解析器的C++封装版本。</p></li>
<li><p><a href="http://www.grinninglizard.com/tinyxml/">TinyXml</a><br/>
TinyXML是目前非常流行的一款基于DOM模型的XML解析器，简单易用且小巧玲珑，非常适合存储简单数据，配置文件，对象序列化等数据量不是很大的操作</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数组与指针的艺术-第二章]]></title>
    <link href="http://zhanlangsir.github.com/blog/2011/04/10/art-of-array-and-point-part-two/"/>
    <updated>2011-04-10T00:00:00+08:00</updated>
    <id>http://zhanlangsir.github.com/blog/2011/04/10/art-of-array-and-point-part-two</id>
    <content type="html"><![CDATA[<p> </p>

<h2>数组名是一个指针常量吗？</h2>

<p>数组名是一个指针常量这种观点来源于数组名在表达式计算中与指针的结果等效性。例如下面的代码：</p>

<pre><code>int a[10], *p = a, *q;
q = a + 1;
q = p + 1;
</code></pre>

<p>在效果上看，a + 1与 p + 1是相同的，这很容易给人一种a就是p的假象，但，这仅仅是假象。鉴于指针常量包含了指针和常量两类概念，我们可以把这个问题分开两部分进行讨论。</p>

<!--more-->


<h3>一、数组名是指针吗？</h3>

<p>在《Ｃ与指针》一书中，作者用一个著名的例子阐述了数组名与指针的不同。在一个文件中定义：int a[10];然后在另一个文件中声明：extern int *a; 笔者不在这里重复其中的原理，书中的作者试图从底层操作上阐述数组名与指针的不同点，但笔者认为这个例子存在一些不足，a在表达式中会转换为一个非对象的符号地址，而指针a却是一个对象，用一个非对象去跟一个对象比较，有“偷跑”的嫌疑，这个例子只是说明了数组名的非对象性质，只能证明对象与非对象实体在底层操作上的不同，事实上，如上一章所述，指针也有非对象形态。笔者认为，无须从底层的角度上花费那么多唇舌，仅仅从字面上的语义就可以推翻数组名是一个指针的观点。</p>

<p>首先，在Ｃ／Ｃ＋＋中，数组类型跟指针类型是两种不同的派生类型，数组名跟指针是两种不同类型的实体，把数组类型的实体说成“是”另一个类型的实体，本身就是荒谬的；<br/>
其次，a + 1在效果上之所以等同于p + 1，是因为a进行了数组到指针的隐式转换，这是一个转换的过程，是converted to而不是is a的过程。如果是两个相同的事物，又怎会有转换的过程呢？当把a放在a + 1表达式中时，a已经从一个数组名转换为一个指针，a是作为指针而不是数组名参与运算的；<br/>
第三，a + 1与p + 1是等效关系，不是等价关系。等价是相同事物的不同表现形式，而等效是不同事物的相同效果。把数组名说成是指针实际上把等效关系误解为等价关系。<br/>
因此，数组名不是指针，永远也不是，但在一定条件下，数组名可以转换为指针。</p>

<h3>二、数组名是一个常量吗？</h3>

<p>看见这句话有人会觉得奇怪，数组定义之后就不能改变了，数组名不就是个常量吗？在表达式中，数组名的确可以转换为一个不变的符号地址，但在Ｃ中，不变的实体不一定是常量！而且，C/C++有常量与常量表达式之分，常量与常量表达式是两种不同的实体，但常量表达式可以作为常量使用。C/C++中的常量虽然有所不同，但都不包括数组或数组名，而且数组名也不一定是常量表达式。</p>

<p>请在C90的编译器中编译如下代码，注意不能是C99和C++的，因为C99和C++不再规定数组的初始化器必须是常量表达式，会看不到效果：</p>

<pre><code>int main( void )
{
    static int a[10], b[10];
    int c[10], d[10];
    int* e[] = { a, b };
    /* A */
    int* f[] = { c, d };
    /* B */
    return 0;
}
</code></pre>

<p>B为什么不能通过编译？是由于自动数组名并不是常量表达式。在C中，常量表达式必须是编译期的，只在运行期不变的实体不是常量表达式，请看标准的摘录：<br/>
6.6 Constant expressions<br/>
A constant expression can be evaluated during translation rather than runtime, and accordingly may be used in any place that a constant may be.<br/>
c和d是自动数组，首地址在编译期是不可知的，因为这样的对象在编译期还不存在；a和b是静态数组，静态对象从程序开始时就已存在，因此a和b的首地址在编译期是已知的，它们都属于常量表达式中的地址常量表达式。<br/>
所以，C/C++中的数组名，都不是常量。C中的数组名，是否常量表达式要视其存储连续性而定，全局数组、静态数组名都是常量表达式，而自动数组名不是。在C＋＋中，由于不再规定常量表达式必须是编译期的，因此C＋＋的数组名都是常量表达式。</p>
]]></content>
  </entry>
  
</feed>
